#pragma once

#include <iostream> //remove

namespace ft
{
	template <class T1, class T2>
	struct pair
	{
		public:
	//MEMBER TYPES
			typedef T1 first_type;
			typedef T2 second_type;
		private:
			typedef std::allocator<first_type> alloctor_first;
			typedef std::allocator<second_type> alloctor_second;

			alloctor_first alloc_first;
			alloctor_second alloc_second;
		public:
			first_type	first;
			second_type	second;
	//MEMBER FUNCTIONS

		////constructor///////////////////////////////////////////////////////
			// default (1)	
			pair(void) : first(), second()
			{

			}

			// copy (2)	
			template<class U, class V>
			pair (const pair<U,V>& pr) : first(pr.first), second(pr.second)
			{

			}

			// initialization (3)	
			pair (const first_type& a, const second_type& b) : first(a), second(b)
			{

			}

		////destructor///////////////////////////////////////////////////////
			// ~pair()
			~pair()
			{

			}

		////operator=///////////////////////////////////////////////////////
			// copy (1)	
			pair&	operator=( const pair& pr )
			{
				alloc_first.construct(&this->first, pr.first);
				alloc_second.construct(&this->second, pr.second);
				return (*this);
			}

	//Iterators---------------------------------------------------------------
		////begin///////////////////////////////////////////////////////
			// iterator begin()
			// const_iterator begin() const

		////end///////////////////////////////////////////////////////
			// iterator end()
			// const_iterator end() const

		////rbegin///////////////////////////////////////////////////////
			// reverse_iterator rbegin()
			// const_reverse_iterator rbegin() const

		////rend///////////////////////////////////////////////////////
			// reverse_iterator rend()
			// const_reverse_iterator rend() const

	//Capacity---------------------------------------------------------------
		////size///////////////////////////////////////////////////////
			size_type size() const
			{
				return (this->_size);
			}

		////max_size///////////////////////////////////////////////////////
			size_type max_size() const
			{
				return (this->alloc.max_size());
			}

		////resize///////////////////////////////////////////////////////
			// void resize (size_type n, value_type val = value_type())

		////capacity///////////////////////////////////////////////////////
			size_type capacity() const
			{
				return (this->_capacity);
			}

		////empty///////////////////////////////////////////////////////
			bool empty() const
			{
				if (this->_size == 0)
					return (true);
				return (false);
			}

		////reserve///////////////////////////////////////////////////////
			// void reserve (size_type n)

	//Element access---------------------------------------------------------------
		////operator[]///////////////////////////////////////////////////////
			reference operator[] (size_type n)
			{
				return (this->array[n]); //remove make function fo that
			}

			const_reference operator[] (size_type n) const
			{
				return (this->array[n]); //remove make function fo that
			}

		////at///////////////////////////////////////////////////////
			reference at (size_type n)
			{
				if (n > this->_size - 1)
					throw std::out_of_range("Catch out_of_range exception!");  //remove make function fo that
				return (this->array[n]);
			}

			const_reference at (size_type n) const
			{
				if (n > this->_size - 1)
					throw std::out_of_range("Catch out_of_range exception!");  //remove make function fo that
				return (this->array[n]);
			}

		////front///////////////////////////////////////////////////////
			reference front()
			{
				return (this->array[0]); //remove make function fo that
			}

			const_reference front() const
			{
				return (this->array[0]); //remove make function fo that
			}

		////back///////////////////////////////////////////////////////
			reference back()
			{
				return (this->array[this->_size - 1]); //remove make function fo that
			}

			const_reference back() const
			{
				return (this->array[this->_size - 1]); //remove make function fo that
			}

	//Modifiers---------------------------------------------------------------
		////assign///////////////////////////////////////////////////////
			// range (1)	
			// template <class InputIterator>
			// void assign (InputIterator first, InputIterator last)

			// fill (2)	
			// void assign (size_type n, const value_type& val)

		////push_back///////////////////////////////////////////////////////
			// void push_back (const value_type& val)

		////pop_back///////////////////////////////////////////////////////
			// void pop_back()

		////insert///////////////////////////////////////////////////////
			// single element (1)	
			// iterator insert (iterator position, const value_type& val)

			// fill (2)	
			// void insert (iterator position, size_type n, const value_type& val)

			// range (3)	
			// template <class InputIterator>
			// void insert (iterator position, InputIterator first, InputIterator last)

		////erase///////////////////////////////////////////////////////
			// iterator erase (iterator position)
			// iterator erase (iterator first, iterator last)

		////swap///////////////////////////////////////////////////////
			// void swap (vector& x)

		////clear///////////////////////////////////////////////////////
			// void clear()

	//Allocator---------------------------------------------------------------
		////get_allocator///////////////////////////////////////////////////////
			// allocator_type get_allocator() const

	//NON-MEMBER FUNCTION OVERLOADS
		////relational operators///////////////////////////////////////////////////////
			// (1)
			// template <class T, class Alloc>
			// bool operator== (const vector<T,Alloc>& lhs, const vector<T,Alloc>& rhs)

			// (2)
			// template <class T, class Alloc>
			// bool operator!= (const vector<T,Alloc>& lhs, const vector<T,Alloc>& rhs)

			// (3)
			// template <class T, class Alloc>
			// bool operator<  (const vector<T,Alloc>& lhs, const vector<T,Alloc>& rhs)

			// (4)
			// template <class T, class Alloc>
			// bool operator<= (const vector<T,Alloc>& lhs, const vector<T,Alloc>& rhs)

			// (5)
			// template <class T, class Alloc>
			// bool operator>  (const vector<T,Alloc>& lhs, const vector<T,Alloc>& rhs)

			// (6)
			// template <class T, class Alloc>
			// bool operator>= (const vector<T,Alloc>& lhs, const vector<T,Alloc>& rhs)

		////swap///////////////////////////////////////////////////////
			// template <class T, class Alloc>
			// void swap (vector<T,Alloc>& x, vector<T,Alloc>& y)

			
	};

	template <class T1, class T2>
	pair<T1,T2> make_pair (T1 x, T2 y)
	{
		return (pair<T1, T2>(x, y));
	}
}